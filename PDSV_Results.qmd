---
title: "PDSV Results"
format: html
editor: source
---

# Data Prep

## 

```{r}
# note that measured_data_long.csv is created by a python script `v3d_import.py`
library(readxl)
library(ggpubr)
library(car)
library(emmeans)
library(lme4)
library(lmerTest)
library(tidyverse)
library(gtsummary)
library(conflicted)

conflict_prefer("select", "dplyr")
conflict_prefer("filter", "dplyr")
conflict_prefer("lmer", "lme4")


```

## Import All Long Data

```{r}

RAW_OUTPUT_FOLDER <- "C:\\Users\\Mac Prible\\OneDrive - The University of Texas at Austin\\research\\PDSV\\data\\PDVS_2024\\v3d"

participant_count <- 5
# Create an empty list to store individual data tables
data_list <- list()

RefreshData <- FALSE

if (RefreshData) {
  for (i in 1:participant_count) {
    print(paste0("Processing output for participant ", i))
    measured_data_long <- read.csv(paste0(RAW_OUTPUT_FOLDER,"\\", "S",i,"_measured_data_long.csv"))
    data_list[[i]] <- measured_data_long
  }
  
  all_data_long <- bind_rows(data_list)
  
  rm(list=setdiff(ls(), "all_data_long"))
}

```

## Average normalized variables and Clean Up

Averages across relevant stance phases. Rename variables so that they are in terms of "ipsilateral" and "contralateral" to ease downstream processing.

```{r}
if (RefreshData) {
  all_normalized_stance_data <- all_data_long %>% 
    ungroup() %>% 
    select(-MaxSpeedDiff) %>%
    mutate(Participant = parse_number(Participant)) %>% 
    group_by(Condition, Side, Participant, StartStop, Period, ConditionOrder, VariableAxis, NormalizedTimeStep) %>% 
    summarize(AverageValue = mean(Value, na.rm=TRUE)) %>% 
    separate(VariableAxis, into = c("Variable", "Axis"), sep = "_(?=[^_]+$)", extra = "merge") %>% 
    mutate(Variable = case_when(
      Variable == "RHEEL" ~ "R_HEEL",
      Variable == "LHEEL" ~ "L_HEEL",
      Variable == "FP1" ~ "Left_GRF",
      Variable == "FP2" ~ "Right_GRF",
      TRUE ~ Variable  # This keeps all other values unchanged
    )) %>% 
      mutate(NewVariable = case_when(
      Side == "left" & grepl("^(L_|Left)", Variable) ~ sub("^(L_|Left_|Left)", "IPSI_", Variable),
      Side == "right" & grepl("^(R_|Right)", Variable) ~ sub("^(R_|Right_|Right)", "IPSI_", Variable),
      Side == "right" & grepl("^(L_|Left)", Variable) ~ sub("^(L_|Left_|Left)", "CONTRA_", Variable),
      Side == "left" & grepl("^(R_|Right)", Variable) ~ sub("^(R_|Right_|Right)", "CONTRA_", Variable),
      TRUE ~ Variable # Keeps all other values unchanged
    ))  %>% 
    mutate(Aim = case_when(
      Condition == "sbt" ~ 2,
      Condition == "ubp" ~ 2,
      Condition == "upp" ~ 2,
      Condition == "bbp" ~ 3,
      Condition == "bpp" ~ 3
    )) %>% 
    mutate(Condition = case_when(
      Condition == "sbt" ~ "cSBT",
      Condition == "ubp" ~ "U. FastBrake",
      Condition == "upp" ~ "U. FastProp",
      Condition == "bbp" ~ "B. FastBrake",
      Condition == "bpp" ~ "B. FastProp"
    )) 
  
  
  rm(list=setdiff(ls(), "all_normalized_stance_data"))
}
```

## Back Up

```{r}
if (!RefreshData) {
  print("Loading all normalized stance data")
  all_normalized_stance_data %>%  write_csv2("all_normalized_stance_data.csv")
  all_normalized_stance_data <- read_csv2("all_normalized_stance_data.csv")
}
```

## Time Normalize PF Impulse

```{r}

stance_times <-all_normalized_stance_data %>% 
  ungroup() %>% 
  filter(Axis == "X") %>% 
  filter(NewVariable %in% c("TIME")) %>% 
  filter(Period %in% c("Baseline", "PostAdapt")) %>%
  group_by(Aim, Participant, Condition, Period, Side) %>% 
  summarize(min = min(AverageValue), max = max(AverageValue)) %>%
  mutate(stance_time = max-min)

PF_impulse_time_normalized <- all_normalized_stance_data %>% 
  ungroup() %>% 
  filter(Axis == "X") %>% 
  filter(NewVariable %in% c("IPSI_ANKLE_MOMENT")) %>% 
  filter(AverageValue < 0) %>%  # interested in PF not DF
  filter(Period %in% c("Baseline", "PostAdapt")) %>%
  group_by(Aim, Participant, Condition, Period, Side) %>% 
  summarize(PF_impulse_time_norm = sum(AverageValue/100))

PF_impulse_by_condition_participant <-stance_times %>% left_join(PF_impulse_time_normalized) %>% 
  ungroup() %>% 
  mutate(PF_impulse_BW_normalized =  PF_impulse_time_norm * stance_time) %>% 
  select(Aim, Participant,Side, Condition, Period, PF_impulse_BW_normalized) %>% 
  mutate(PF_impulse_time_normalized=abs(PF_impulse_BW_normalized)) %>% 
  pivot_wider(id_cols=c(Aim, Participant, Side, Condition), values_from = PF_impulse_time_normalized, names_from = Period) %>% 
  pivot_longer(cols = c(Baseline, PostAdapt), names_to = "Period", values_to = "PF_Impulse")


```

# Aim 2: Unilateral PDSV

## Step Length Ratio (SLR)

### Raw Plot

```{r}

Aim2_SLR <- all_normalized_stance_data %>% 
  ungroup() %>% 
  mutate(Period = factor(Period, levels = c("Baseline", "Early Adapt", "Late Adapt", "PostAdapt")),
         Condition = factor(Condition, levels = c("cSBT", "U. FastBrake", "U. FastProp"))
         ) %>% 
  filter(NormalizedTimeStep==1) %>% 
  filter(Axis == "X") %>% 
  filter(NewVariable %in% c("HEEL_DISTANCE")) %>% 
  filter(Aim == 2) %>% 
  mutate(StepLength = abs(AverageValue)) %>% 
  select(-c(StartStop, Axis, ConditionOrder, Variable, NewVariable, NormalizedTimeStep,AverageValue)) %>% 
  pivot_wider(names_from = Side, values_from = StepLength) %>% 
  mutate(SLR = left/right)

  
Aim2_SLR %>%  
  ggplot(aes(x=Period, y = SLR, group = Participant, color=factor(Participant)))+
  geom_point()+
  geom_line()+
  geom_hline(yintercept =1, linetype="dashed")+
  facet_grid(cols=vars(Condition))+
  theme_minimal()+
  theme(plot.title = element_text(hjust = 0.5,),
        plot.caption = element_text(hjust = 0.5, size = 13),
        axis.text.x = element_text(angle = 45, hjust = 1),   # Add this line
        legend.position = "bottom")+
  labs(title = "SLR Across Treadmill Protocol")


  
```

```{r}

Aim2_SLR %>% 
  ungroup() %>% 
  group_by(Condition, Period) %>% 
  summarize(SLR_mean = mean(SLR),
            SLR_sd = sd(SLR)) %>% 
  pivot_wider(names_from = Condition, values_from = c(SLR_mean,SLR_sd)) %>% 
  kable(format = "html") 
            

```

### Linear Mixed Model and Post Hoc Tests

```{r}

aim2_SLR_PrePost <- Aim2_SLR %>% 
  filter(Period %in% c("Baseline", "PostAdapt"))

# Fit a linear mixed model
model <- lmer(SLR ~ Period * Condition + (1|Participant), data = aim2_SLR_PrePost)
model_summary <- summary(model)

# Print the fixed effects table
print(model_summary$coefficients)

# Likelihood ratio test for the full model against the null model
null_model <- lmer(SLR ~ 1 + (1|Participant), data = aim2_SLR_PrePost)
anova_result <- anova(null_model, model)

print(anova_result)

# Compute estimated marginal means
emm <- emmeans(model, specs = ~ Period | Condition)

# 1. Pairwise comparisons of Period within each Condition
period_comparisons <- pairs(emm, simple = "Period", adjust="holm")
print(period_comparisons)


# Assuming period_comparisons is already available from your previous analysis
# Extract p-values and format them for plotting
pvalue_data <- period_comparisons %>%
  as_tibble() %>%
  mutate(Condition = sub("Condition=(.*)", "\\1", Condition),
         p.value.label = paste("p =", sprintf("%.3f", p.value))) %>%
  group_by(Condition) %>%
  summarize(p.value.label = first(p.value.label))  # Use first p-value for each condition

# Calculate y-position for p-values
y_max <- Aim2_SLR %>%
  filter(Period %in% c("Baseline", "PostAdapt")) %>%
  group_by(Condition) %>%
  summarize(max_SLR = max(SLR)) %>%
  pull(max_SLR) %>%
  max()

y_position <- y_max + 0.1  # Adjust this value as needed

# Add x-position for p-values
pvalue_data <- pvalue_data %>%
  mutate(x = 1.5,  # Midpoint between Baseline (1) and PostAdapt (2)
         y = y_position)

# Create the plot with p-values
plot <- Aim2_SLR %>%  
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  ggplot(aes(x = Period, y = SLR, group = Participant, color = factor(Participant))) +
  geom_point() +
  geom_line() +
  geom_hline(yintercept = 1, linetype = "dashed") +
  facet_grid(cols = vars(Condition)) +
  geom_text(data = pvalue_data, 
            aes(x = x, y = y, label = p.value.label),
            inherit.aes = FALSE,
            show.legend = FALSE) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0.5, size = 13),
        legend.position = "bottom") +
  labs(title = "SLR Across Treadmill Protocol",
       caption = "Holm adjusted p-values ",
       x = "Period",
       y = "SLR",
       color = "Participant")

# Display the plot
print(plot)

```

### Numbers for Power Analysis

```{r}

aim2_SLR_PrePost %>% 
  ungroup() %>% 
  group_by(Condition, Period) %>% 
  summarize(std_dev_SLR = sd(SLR),
            mean_SLR = mean(SLR))

aim2_SLR_PrePost %>% 
  ungroup() %>% 
  group_by(Condition, Period) %>% 
  summarize(std_dev_SLR = sd(SLR),
            mean_SLR = mean(SLR)) %>% 
  ungroup() %>% 
  group_by(Period) %>% 
  summarize(mean_std_dev_SLR = mean(std_dev_SLR))
  
aim2_SLR_PrePost %>% 
  ungroup() %>% 
  group_by(Condition) %>% 
  summarize(std_dev_SLR = sd(SLR),
            mean_SLR = mean(SLR))

aim2_SLR_PrePost %>% 
  ungroup() %>% 
  group_by(Period) %>% 
    summarize(std_dev_SLR = sd(SLR),
              mean_SLR = mean(SLR))

aim2_SLR_PrePost %>% 
  ungroup() %>% 
  summarize(std_dev_SLR = sd(SLR),
            mean_SLR = mean(SLR))

# Assuming your dataframe is called 'df'
aim2_SLR_PrePost %>% 
  # Reshape the data to wide format
  pivot_wider(
    id_cols = c(Participant, Condition),
    names_from = Period,
    values_from = SLR
  ) %>% 
  # Group by Condition
  group_by(Condition) %>%
  # Calculate correlation for each Condition
  summarise(
    correlation = cor(Baseline, PostAdapt, use = "pairwise.complete.obs"),
  ) %>%
  # Ungroup to remove grouping structure
  ungroup()

```

## Ankle PF Impulse

### Sample Participant Ankle Torque Profile

```{r }
figure_participant <- 1

all_normalized_stance_data %>% 
  filter(Participant == figure_participant) %>%  
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  filter(Aim==2) %>% 
  filter(Axis %in% c("X")) %>% 
  # filter(NewVariable == "HEEL_DISTANCE") %>% 
  filter(NewVariable == "IPSI_ANKLE_MOMENT") %>% 
  ggplot(aes(x=NormalizedTimeStep, y = AverageValue, color=Period))+
  geom_line()+
  facet_grid(cols = vars(Side), rows = vars(Condition), scales = "free_y")+
  theme_minimal()+
  theme(legend.position = "bottom",
        plot.caption = element_text(hjust = 0.5, size=13)) +  # Center-justify the caption
  labs(title = paste0("Subject ", figure_participant, ": Ankle Torque Profile Before and After 6 Minutes of Adaptation") ,
       subtitle = "Tested Conditions: cSBT, FastBrake, FastProp",
       caption = str_wrap("Ankle torque on the left (altered) side is decreased following cSBT and FastBrake, but increases following adaptation to FastProp", width = 80),
       x = "% stance",
       y = "Torque (N.m/BW)",
       )

```

### All Participants Ankle Torque Profile

```{r,fig.width=6, fig.height=10 }

all_normalized_stance_data %>% 
  filter(Period %in% c("Baseline", "PostAdapt")) %>%
  # filter(Period %in% c("Baseline", "Late Adapt")) %>%
  filter(Aim==2) %>% 
  filter(Axis %in% c("X")) %>% 
  filter(NewVariable == "IPSI_ANKLE_MOMENT") %>% 
  group_by(Condition, Side, StartStop, Period, Variable, Axis, NormalizedTimeStep) %>% 
    summarize(AverageValue = mean(AverageValue)) %>% 

  ggplot(aes(x=NormalizedTimeStep, y = AverageValue, color=Period))+
  geom_line(size=1.5)+
  facet_grid(cols = vars(Side), rows = vars(Condition))+
  theme_minimal()+
  theme(legend.position = "bottom",
        strip.text = element_text(size = 14, face = "bold"),
         axis.title = element_text(size = 14, face = "bold"),
        axis.text = element_text(size = 12))+
  labs(x="% Stance",
       y = "Torque (N.m/BW)") +
  labs(title = "All Subjects: Ankle Torque Profile Before and After \n6 Minutes of Adaptation" ,
       # subtitle = "Tested Conditions: U. FastBrake, U. FastProp",
       x = "% stance",
       y = "Torque (N.m/BW)")

```

### PF Impulse By Period and Condition

```{r}


Aim2_PF_Impulse <- PF_impulse_by_condition_participant %>% 
  filter(Aim==2) %>% 
  filter(Side=="left")

# Data preparation
Aim2_PF_Impulse <- Aim2_PF_Impulse %>%
  mutate(
    Participant = factor(Participant),
    Side = factor(Side),
    Condition = factor(Condition),
    Period = factor(Period)
  )

# Left
Aim2_PF_Impulse %>% 
  ggplot(aes(x = Period, y = PF_Impulse, color = factor(Participant), group = Participant)) +
  geom_point(size = 2, width = 0.2, height = 0) +  # Added jitter
  geom_line() +  # Made lines slightly transparent
  stat_summary(aes(group = 1), fun = mean, geom = "line", color = "black", size = 0.8, linetype = "dashed", alpha=.6) +  # Thinner, dashed mean line
  stat_summary(aes(group = 1), fun = mean, geom = "point", color = "black", size = 3, shape = 18) +  # Smaller mean points
  geom_text(stat = "summary", fun = mean,
            aes(label = sprintf("%.2f", ..y..), group = 1,
                hjust = ifelse(Period %in% c("Baseline"), 1.5, -1)),
            color = "black", vjust = -0.5, size = 4, fontface = "bold",
            bg.color = "white", bg.r = 0.15) +
  
  facet_grid(cols = vars(Condition)) +
  labs(x = "Period", y = "Left PF Impulse (N.m.s/BW)", 
       title = "Aim 2: Left PF Impulse by Period and Condition", 
       color = "Participant") +
  theme_minimal() +
  theme(legend.position = "bottom")


# Right
PF_impulse_by_condition_participant %>% 
  filter(Aim==2) %>% 
  filter(Side=="right") %>%  
  ggplot( aes(x = Period, y = PF_Impulse, color = factor(Participant), group = Participant)) +
  geom_point(size = 3) +
  geom_line() +
  facet_grid(cols=vars(Condition)) +
  labs(x = "Period", y = "Right PF Impulse (N.m.s/BW)", title = "Aim 2: Right PF Impulse by Period and Condition", color = "Participant") +
  theme_minimal() +
  theme(legend.position = "bottom")


```

### Linear Mixed Model and Post Hoc Tests

```{r}


# Fit a linear mixed model
model <- lmer(PF_Impulse ~ Period * Condition + (1|Participant), data = Aim2_PF_Impulse)
model_summary <- summary(model)

# Print the fixed effects table
print(model_summary$coefficients)

# Likelihood ratio test for the full model against the null model
null_model <- lmer(PF_Impulse ~ 1 + (1|Participant), data = Aim2_PF_Impulse)
anova_result <- anova(null_model, model)

print(anova_result)

# Compute estimated marginal means
emm <- emmeans(model, specs = ~ Period | Condition)

# 1. Pairwise comparisons of Period within each Condition
period_comparisons <- pairs(emm, simple = "Period", adjust="holm")
print(period_comparisons)


# Assuming period_comparisons is already available from your previous analysis
# Extract p-values and format them for plotting
pvalue_data <- period_comparisons %>%
  as_tibble() %>%
  mutate(Condition = sub("Condition=(.*)", "\\1", Condition),
         p.value.label = paste("p =", sprintf("%.3f", p.value))) %>%
  group_by(Condition) %>%
  summarize(p.value.label = first(p.value.label))  # Use first p-value for each condition

# Calculate y-position for p-values
y_max <- Aim2_PF_Impulse %>%
  filter(Period %in% c("Baseline", "PostAdapt")) %>%
  group_by(Condition) %>%
  summarize(max_PF_Impulse = max(PF_Impulse)) %>%
  pull(max_PF_Impulse) %>%
  max()

y_position <- y_max + 0.1  # Adjust this value as needed

# Add x-position for p-values
pvalue_data <- pvalue_data %>%
  mutate(x = 1.5,  # Midpoint between Baseline (1) and PostAdapt (2)
         y = y_position)

# Create the plot with p-values
plot <- Aim2_PF_Impulse %>%  
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  ggplot(aes(x = Period, y = PF_Impulse, group = Participant, color = factor(Participant))) +
  geom_point() +
  geom_line() +
  facet_grid(cols = vars(Condition)) +
  geom_text(data = pvalue_data,
            aes(x = x, y = y, label = p.value.label),
            inherit.aes = FALSE,
            show.legend = FALSE) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0.5, size = 13),
        legend.position = "bottom") +
  labs(title = "PF Impulse Across Treadmill Protocol",
       caption = "Holm adjusted p-values ",
       x = "Period",
       y = "SLR",
       color = "Participant")

# Display the plot
print(plot)

```

### Assumptions for Power Analysis

```{r}

Aim2_PF_Impulse %>% 
  ungroup() %>% 
  group_by(Condition, Period) %>% 
  summarize(std_dev = sd(PF_Impulse),
            mean_PF_Impulse = mean(PF_Impulse))

Aim2_PF_Impulse %>% 
  ungroup() %>% 
  group_by(Condition, Period) %>% 
  summarize(std_dev_PF = sd(PF_Impulse),
            mean_PF = mean(PF_Impulse)) %>% 
  ungroup() %>% 
  group_by(Period) %>% 
  summarize(mean_std_dev_PF = mean(std_dev_PF),
            mean_mean_PF = mean(mean_PF))

Aim2_PF_Impulse %>% 
  group_by( Period) %>% 
  summarize(std_dev = sd(PF_Impulse),
            mean_PF_Impulse = mean(PF_Impulse))


Aim2_PF_Impulse %>% 
  ungroup() %>% 
  summarize(std_dev = sd(PF_Impulse),
            mean_PF_Impulse = mean(PF_Impulse))

# Assuming your dataframe is called 'df'
Aim2_PF_Impulse %>% 
  # Reshape the data to wide format
  pivot_wider(
    id_cols = c(Participant, Condition),
    names_from = Period,
    values_from = PF_Impulse
  ) %>% 
  # Group by Condition
  group_by(Condition) %>%
  # Calculate correlation for each Condition
  summarise(
    correlation = cor(Baseline, PostAdapt, use = "pairwise.complete.obs"),
  ) %>%
  # Ungroup to remove grouping structure
  ungroup()


```

# Aim 3: Bilateral PDSV

## Ankle Torque

### Sample Participant

```{r}
figure_participant <-1

all_normalized_stance_data %>% 
  filter(Participant == figure_participant) %>%  
  filter(Period %in% c("Baseline", "PostAdapt")) %>%
  # filter(Period %in% c("Baseline", "Late Adapt")) %>%
  filter(Aim==3) %>% 
  filter(Axis %in% c("X")) %>% 
  filter(NewVariable == "IPSI_ANKLE_MOMENT") %>% 
  ggplot(aes(x=NormalizedTimeStep, y = AverageValue, color=Period))+
  geom_line()+
  facet_grid(cols = vars(Side), rows = vars(Condition))+
  theme_minimal()+
  theme(legend.position = "bottom")+
  labs(x="% Stance",
       y = "Torque (N.m/BW)") +
  labs(title = paste0("Subject ", figure_participant, ": Ankle Torque Profile Before and After 6 Minutes of Adaptation") ,
       # subtitle = "Tested Conditions: B. FastBrake, B. FastProp",
       x = "% stance",
       y = "Torque (N.m/BW)")

ggsave("C:\\Users\\Mac Prible\\OneDrive - The University of Texas at Austin\\research\\dissertation_proposal\\study 3\\ankle_torque_single_subject.png")
```

### All participants

```{r}

all_normalized_stance_data %>% 
  filter(Period %in% c("Baseline", "PostAdapt")) %>%
  # filter(Period %in% c("Baseline", "Late Adapt")) %>%
  filter(Aim==3) %>% 
  filter(Axis %in% c("X")) %>% 
  filter(NewVariable == "IPSI_ANKLE_MOMENT") %>% 
  group_by(Condition, Side, StartStop, Period, Variable, Axis, NormalizedTimeStep) %>% 
    summarize(AverageValue = mean(AverageValue)) %>% 

  ggplot(aes(x=NormalizedTimeStep, y = AverageValue, color=Period))+
  geom_line()+
  facet_grid(cols = vars(Side), rows = vars(Condition))+
  theme_minimal()+
  theme(legend.position = "bottom")+
  labs(x="% Stance",
       y = "Torque (N.m/BW)") +
  labs(title = "All Subjects: Ankle Torque Profile Before and After 6 Minutes of Adaptation" ,
       # subtitle = "Tested Conditions: B. FastBrake, B. FastProp",
       x = "% stance",
       y = "Torque (N.m/BW)")


ggsave("C:\\Users\\Mac Prible\\OneDrive - The University of Texas at Austin\\research\\dissertation_proposal\\study 3\\ankle_torque_all_subjects.png")

```

### Linear Mixed Effects Model

```{r}
bilateral_PF_impulse_plot_data <- PF_impulse_by_condition_participant%>%
  ungroup() %>% 
  filter(Aim==3) %>% 
  group_by(Participant, Condition, Period) %>% 
  summarize(PF_Impulse = mean(PF_Impulse))


model <- lmer(PF_Impulse ~ Period * Condition + (1|Participant), data = bilateral_PF_impulse_plot_data)
model_summary <- summary(model)
print(model_summary)

# Print the fixed effects table
print(model_summary$coefficients)

# Likelihood ratio test for the full model against the null model
null_model <- lmer(PF_Impulse ~ 1 + (1|Participant), data = bilateral_PF_impulse_plot_data)
anova_result <- anova(null_model, model)

print(anova_result)

# Compute estimated marginal means
emm <- emmeans(model, specs = ~ Period | Condition)

# 1. Pairwise comparisons of Period within each Condition
period_comparisons <- pairs(emm, simple = "Period", adjust="holm")
print(period_comparisons)


# Assuming period_comparisons is already available from your previous analysis
# Extract p-values and format them for plotting
pvalue_data <- period_comparisons %>%
  as_tibble() %>%
  mutate(Condition = sub("Condition=(.*)", "\\1", Condition),
         p.value.label = paste("p =", sprintf("%.3f", p.value))) %>%
  group_by(Condition) %>%
  summarize(p.value.label = first(p.value.label))  # Use first p-value for each condition

# Calculate y-position for p-values
y_max <- bilateral_PF_impulse_plot_data %>%
  filter(Period %in% c("Baseline", "PostAdapt")) %>%
  group_by(Condition) %>%
  summarize(max_PF_Impulse = max(PF_Impulse)) %>%
  pull(max_PF_Impulse) %>%
  max()

y_position <- y_max + 0.1  # Adjust this value as needed

# Add x-position for p-values
pvalue_data <- pvalue_data %>%
  mutate(x = 1.5,  # Midpoint between Baseline (1) and PostAdapt (2)
         y = y_position)

# Create the plot with p-values
plot <- bilateral_PF_impulse_plot_data %>%  
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  ggplot(aes(x = Period, y = PF_Impulse, group = Participant, color = factor(Participant))) +
  geom_point() +
  geom_line() +
  facet_grid(cols = vars(Condition)) +
  geom_text(data = pvalue_data, 
            aes(x = x, y = y, label = p.value.label),
            inherit.aes = FALSE,
            show.legend = FALSE) +
  theme_minimal() +
  theme(plot.title = element_text(hjust = 0.5),
        plot.caption = element_text(hjust = 0.5, size = 13),
        legend.position = "bottom") +
  labs(title = "PF Impulse Across Treadmill Protocol",
       caption = "Holm adjusted p-values ",
       x = "Period",
       y = "SLR",
       color = "Participant")

# Display the plot
print(plot)
```

### PF Impulse By Period and Condition

```{r}




# Left
bilateral_PF_impulse_plot_data %>% 
  ggplot(aes(x = Period, y = PF_Impulse, color = factor(Participant), group = Participant)) +
  geom_point(size = 2, width = 0.2, height = 0) +  # Added jitter
  geom_line() +  # Made lines slightly transparent
  stat_summary(aes(group = 1), fun = mean, geom = "line", color = "black", size = 0.8, linetype = "dashed", alpha=.6) +  # Thinner, dashed mean line
  stat_summary(aes(group = 1), fun = mean, geom = "point", color = "black", size = 3, shape = 18) +  # Smaller mean points
  geom_text(stat = "summary", fun = mean,
            aes(label = sprintf("%.2f", ..y..), group = 1,
                hjust = ifelse(Period %in% c("Baseline"), 1.5, -1)),
            color = "black", vjust = -0.5, size = 4, fontface = "bold",
            bg.color = "white", bg.r = 0.15) +
  
  facet_grid(cols = vars(Condition)) +
  labs(x = "Period", y = "Mean PF Impulse (N.m.s/BW)", 
       title = "Study 3: Mean Bilateral PF Impulse by Period and Condition", 
       color = "Participant") +
  theme_minimal() +
  theme(legend.position = "bottom")



ggsave("C:\\Users\\Mac Prible\\OneDrive - The University of Texas at Austin\\research\\dissertation_proposal\\study 3\\PF_impulse_Period_x_Condition.png")

```
### Assumptions for Power Analysis

```{r}
bilateral_PF_impulse_plot_data %>% 
  ungroup() %>% 
  group_by(Condition, Period) %>% 
  summarize(std_dev = sd(PF_Impulse),
            mean_PF_Impulse = mean(PF_Impulse))

bilateral_PF_impulse_plot_data %>% 
  group_by(Period) %>% 
  summarize(std_dev = sd(PF_Impulse),
            mean_PF_Impulse = mean(PF_Impulse))

# bilateral_PF_impulse_plot_data %>% 
#   group_by(Period) %>% 
#   summarize(std_dev = sd(PF_Impulse),
#             mean_PF_Impulse = mean(PF_Impulse)) %>% 
#   summarize(mean_std_dev_PF = mean(std_dev),
#             mean_mean_PF = mean(mean_PF_Impulse))

bilateral_PF_impulse_plot_data %>% 
  ungroup() %>% 
  summarize(std_dev = sd(PF_Impulse),
            mean_PF_Impulse = mean(PF_Impulse))

# Assuming your dataframe is called 'df'
bilateral_PF_impulse_plot_data %>% 
  # Reshape the data to wide format
  pivot_wider(
    id_cols = c(Participant, Condition),
    names_from = Period,
    values_from = PF_Impulse
  ) %>% 
  # Group by Condition
  group_by(Condition) %>%
  # Calculate correlation for each Condition
  summarise(
    correlation = cor(Baseline, PostAdapt, use = "pairwise.complete.obs"),
  ) %>%
  # Ungroup to remove grouping structure
  ungroup()


```

## step Length in a body frame of reference

Reviewing this calculations I think there are some problems with the way I went about it. Definitely want to go over these calcs with a fine-toothed comb.

```{r}
StepLength_BodyFrameOfReference <- all_normalized_stance_data %>% 
  ungroup() %>% 
  filter(NormalizedTimeStep==1) %>% 
  filter(Aim == 3) %>% 
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  # separate(VariableAxis, into = c("Variable", "Axis"), sep = "_(?=[^_]+$)", extra = "merge") %>% 
  filter(Axis == "Y") %>% 
  filter(NewVariable %in% c("IPSI_HEEL", "CONTRA_HEEL", "PELVIS_COM")) %>% 
  select(-c(Axis, NormalizedTimeStep,StartStop, Variable, ConditionOrder)) %>% 
  pivot_wider(names_from = NewVariable, values_from = AverageValue) %>% 
  mutate(AnteriorStep = -(IPSI_HEEL-PELVIS_COM),
         PosteriorStep = CONTRA_HEEL-PELVIS_COM,
         Step = -(IPSI_HEEL - CONTRA_HEEL)) %>% 
  select(-c(PELVIS_COM, CONTRA_HEEL, IPSI_HEEL)) %>% 
  group_by(Condition, Participant,Period) %>% 
  summarise(AnteriorStep = mean(AnteriorStep),
            PosteriorStep = mean(PosteriorStep),
            Step = mean(Step)) %>% 
  pivot_longer(cols = c(AnteriorStep, PosteriorStep, Step)) %>% 
  ungroup() 
  
StepLength_BodyFrameOfReference %>% 
  ggplot(aes(x=Period, y = value, color = factor(Participant), group = Participant))+
  geom_point()+
  geom_line()+
  theme_minimal()+
  theme(legend.position = "bottom")+
  labs(y = "Length (m)")+
  facet_grid(rows=vars(Condition), cols = vars(name))

```

# Belt Speed Check

```{r}
all_normalized_stance_data %>% 
  filter(Aim==2) %>%
  filter(Participant==4) %>% 
  filter(Period %in% c("Late Adapt")) %>%
  filter(NewVariable == "IPSI_BeltSpeed") %>% 
  mutate(Condition = factor(Condition, levels = c("cSBT", "U. FastBrake", "U. FastProp", "B. FastBrake", "B. FastProp"))) %>% 
  ggplot(aes(x=NormalizedTimeStep, y = AverageValue, color=Side))+
  geom_line()+
  facet_grid(cols = vars(Participant, Side), rows = vars(Condition))+
  theme_minimal()+
  theme( legend.position = "none",
        strip.text.y = element_text( angle=0))+
  labs(title = "Belt Speed Across Stance Phase By Condition",
       # subtitle = "Adaptation Belt Speeds for Aims 1 and 2",
       x = "% Stance",
       y = "Belt Speed (m/s)",
  ) +
  scale_color_manual(values=c("left"="blue", "right"="red"))

```

# Stance Times

```{r}
stance_times %>%
  ggplot( aes(x = Period, y = stance_time, color = factor(Participant), group = Participant)) +
  geom_point(size = 3) +
  geom_line() +
  facet_grid(cols=vars(Condition),rows=vars(Side)) +
  labs(x = "Period", y = "Stance Time (s)", title = "Aim 2: Right PF Impulse by Period and Condition", color = "Participant") +
  theme_minimal() +
  theme(legend.position = "bottom")
```

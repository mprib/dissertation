---
title: "PDSV Results"
format: html
editor: source
---

# Data Prep
## Import All Long Data 

```{r}
# note that measured_data_long.csv is created by a python script `v3d_import.py`
library(readxl)
library(tidyverse)
library(ez) # for stats
library(ggpubr)
library(car)
RAW_OUTPUT_FOLDER <- "C:\\Users\\Mac Prible\\OneDrive - The University of Texas at Austin\\research\\PDSV\\data\\PDVS_2024\\v3d"

participant_count <- 5
# Create an empty list to store individual data tables
data_list <- list()


for (i in 1:participant_count) {
  print(paste0("Processing output for participant ", i))
  measured_data_long <- read.csv(paste0(RAW_OUTPUT_FOLDER,"\\", "S",i,"_measured_data_long.csv"))
  data_list[[i]] <- measured_data_long
}

all_data_long <- bind_rows(data_list)

rm(list=setdiff(ls(), "all_data_long"))
```


## Average normalized variables and Clean Up

Averages across relevant stance phases. Rename variables so that they are in terms of "ipsilateral" and "contralateral" to ease downstream processing.

```{r}
all_normalized_stance_data <- all_data_long %>% 
  ungroup() %>% 
  select(-MaxSpeedDiff) %>% 
  mutate(Participant = parse_number(Participant)) %>% 
  group_by(Condition, Side, Participant, StartStop, Period, ConditionOrder, VariableAxis, NormalizedTimeStep) %>% 
  summarize(AverageValue = mean(Value, na.rm=TRUE)) %>% 
  separate(VariableAxis, into = c("Variable", "Axis"), sep = "_(?=[^_]+$)", extra = "merge") %>% 
  mutate(Variable = case_when(
    Variable == "RHEEL" ~ "R_HEEL",
    Variable == "LHEEL" ~ "L_HEEL",
    Variable == "FP1" ~ "Left_GRF",
    Variable == "FP2" ~ "Right_GRF",
    TRUE ~ Variable  # This keeps all other values unchanged
  )) %>% 
    mutate(NewVariable = case_when(
    Side == "left" & grepl("^(L_|Left)", Variable) ~ sub("^(L_|Left_|Left)", "IPSI_", Variable),
    Side == "right" & grepl("^(R_|Right)", Variable) ~ sub("^(R_|Right_|Right)", "IPSI_", Variable),
    Side == "right" & grepl("^(L_|Left)", Variable) ~ sub("^(L_|Left_|Left)", "CONTRA_", Variable),
    Side == "left" & grepl("^(R_|Right)", Variable) ~ sub("^(R_|Right_|Right)", "CONTRA_", Variable),
    TRUE ~ Variable # Keeps all other values unchanged
  ))  %>% 
  mutate(Aim = case_when(
    Condition == "sbt" ~ 2,
    Condition == "ubp" ~ 2,
    Condition == "upp" ~ 2,
    Condition == "bbp" ~ 3,
    Condition == "bpp" ~ 3
  )) %>% 
  mutate(Condition = case_when(
    Condition == "sbt" ~ "cSBT",
    Condition == "ubp" ~ "U. FastBrake",
    Condition == "upp" ~ "U. FastProp",
    Condition == "bbp" ~ "B. FastBrake",
    Condition == "bpp" ~ "B. FastProp"
  )) 


rm(list=setdiff(ls(), "all_normalized_stance_data"))
```

## Time Normalize PF Impulse

```{r}

stance_times <-all_normalized_stance_data %>% 
  ungroup() %>% 
  filter(Axis == "X") %>% 
  filter(NewVariable %in% c("TIME")) %>% 
  filter(Period %in% c("Baseline", "PostAdapt")) %>%
  group_by(Aim, Participant, Condition, Period, Side) %>% 
  summarize(min = min(AverageValue), max = max(AverageValue)) %>%
  mutate(stance_time = max-min)

PF_impulse_time_normalized <- all_normalized_stance_data %>% 
  ungroup() %>% 
  filter(Axis == "X") %>% 
  filter(NewVariable %in% c("IPSI_ANKLE_MOMENT")) %>% 
  filter(AverageValue < 0) %>%  # interested in PF not DF
  filter(Period %in% c("Baseline", "PostAdapt")) %>%
  group_by(Aim, Participant, Condition, Period, Side) %>% 
  summarize(PF_impulse_time_norm = sum(AverageValue/100))

PF_impulse_by_condition_participant <-stance_times %>% left_join(PF_impulse_time_normalized) %>% 
  ungroup() %>%
  mutate(PF_impulse_BW_normalized =  PF_impulse_time_norm * stance_time) %>% 
  select(Aim, Participant,Side, Condition, Period, PF_impulse_BW_normalized) %>% 
  mutate(PF_impulse_time_normalized=abs(PF_impulse_BW_normalized)) %>% 
  pivot_wider(id_cols=c(Aim, Participant, Side, Condition), values_from = PF_impulse_time_normalized, names_from = Period) %>% 
  pivot_longer(cols = c(Baseline, PostAdapt), names_to = "Period", values_to = "PF_Impulse")


```


# Aim 2: Unilateral PDSV
## Step Length Ratio (SLR)
### Plot
```{r}

Aim2_SLR <- all_normalized_stance_data %>% 
  ungroup() %>% 
  filter(NormalizedTimeStep==1) %>% 
  filter(Axis == "X") %>% 
  filter(NewVariable %in% c("HEEL_DISTANCE")) %>% 
  filter(Aim == 2) %>% 
  mutate(StepLength = abs(AverageValue)) %>% 
  select(-c(StartStop, Axis, ConditionOrder, Variable, NewVariable, NormalizedTimeStep,AverageValue)) %>% 
  pivot_wider(names_from = Side, values_from = StepLength) %>% 
  mutate(SLR = left/right) 
  
Aim2_SLR %>%  
  ggplot(aes(x=Period, y = SLR, group = Participant, color=factor(Participant)))+
  geom_point()+
  geom_line()+
  geom_hline(yintercept =1, linetype="dashed")+
  facet_grid(cols=vars(Condition))+
  theme_minimal()+
  theme(plot.title = element_text(hjust = 0.5,),
        plot.caption = element_text(hjust = 0.5, size = 13),
        legend.position = "bottom")+
  labs(title = "SLR Across Treadmill Protocol")
  
```
### Repeated Measures ANOVA

```{r}

Aim2_SLR %>% 
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  mutate(Condition = factor(Condition),
         Period = factor(Period, levels = c("Baseline", "PostAdapt")),
         Participant = factor(Participant)) %>% 
  ezANOVA(
    dv = .(SLR),
    wid = .(Participant),
    within = .(Period, Condition),
    detailed = TRUE
  ) 
  

```

A repeated measures ANOVA was conducted to examine the effects of period (Baseline vs. Post Adaptation) and condition (cSBT, U. FastBrake, and U. FastProp) on Step Length Ratio (SLR). Results revealed a significant main effect of period, F(1, 4) = 10.77, p = .030, ηp² = .43, indicating a substantial change in SLR from Baseline to Post Adaptation across all conditions. Neither the main effect of condition (F(2, 8) = 1.28, p = .33) nor the interaction between period and condition (F(2, 8) = 0.61, p = .57) reached statistical significance. These findings support the hypothesis that SLR changes significantly from Baseline to Post Adaptation regardless of the intervention type. 


### Change in SLR from Baseline to Post Adaptation

```{r}

Aim2_SLR %>% 
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  mutate(Condition = factor(Condition),
         Period = factor(Period, levels = c("Baseline", "PostAdapt")),
         Participant = factor(Participant)) %>% 
ggplot(aes(x = Period, y = SLR, color = Condition, group = Condition)) +
  stat_summary(fun = mean, geom = "point", size = 3) +
  stat_summary(fun = mean, geom = "line") +
  stat_summary(fun.data = mean_se, geom = "errorbar", width = 0.2) +
  theme_minimal() +
  labs(title = "Change in SLR from Baseline to PostAdapt",
       x = "Period",
       y = "SLR")

```


## Ankle PF Impulse
### Sample Participant Ankle Torque Profile

```{r }
figure_participant <- 4

all_normalized_stance_data %>% 
  filter(Participant == figure_participant) %>%  
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  filter(Aim==2) %>% 
  filter(Axis %in% c("X")) %>% 
  # filter(NewVariable == "HEEL_DISTANCE") %>% 
  filter(NewVariable == "IPSI_ANKLE_MOMENT") %>% 
  ggplot(aes(x=NormalizedTimeStep, y = AverageValue, color=Period))+
  geom_line()+
  facet_grid(cols = vars(Side), rows = vars(Condition), scales = "free_y")+
  theme_minimal()+
  theme(legend.position = "bottom",
        plot.caption = element_text(hjust = 0.5, size=13)) +  # Center-justify the caption
  labs(title = paste0("Subject ", figure_participant, ": Ankle Torque Profile Before and After 6 Minutes of Adaptation") ,
       subtitle = "Tested Conditions: cSBT, FastBrake, FastProp",
       caption = str_wrap("Ankle torque on the left (altered) side is decreased following cSBT and FastBrake, but increases following adaptation to FastProp", width = 80),
       x = "% stance",
       y = "Torque (N.m/BW)",
       )

```

### All Participants Ankle Torque Profile
```{r}

all_normalized_stance_data %>% 
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  filter(Aim==2) %>% 
  filter(Axis %in% c("X")) %>% 
  filter(NewVariable == "IPSI_ANKLE_MOMENT") %>% 
  group_by(Condition, Side, StartStop, Period, Variable, Axis, NormalizedTimeStep) %>% 
    summarize(AverageValue = mean(AverageValue)) %>% 

  ggplot(aes(x=NormalizedTimeStep, y = AverageValue, color=Period))+
  geom_line()+
  facet_grid(cols = vars(Side), rows = vars(Condition), scales = "free_y")+
  theme_minimal()+
  theme(legend.position = "bottom")+
  labs(x="% Stance",
       y = "Torque (N.m/BW)") +
  labs(title = "All Subjects: Ankle Torque Profile Before and After 6 Minutes of Adaptation" ,
       subtitle = "Tested Conditions: B. FastBrake, B. FastProp",
       x = "% stance",
       y = "Torque (N.m/BW)")

```
### PF Impulse By Period and Condition

```{r}


Aim2_PF_Impulse <- PF_impulse_by_condition_participant %>% 
  filter(Aim==2) %>% 
  filter(Side=="left")

# Data preparation
Aim2_PF_Impulse <- Aim2_PF_Impulse %>%
  mutate(
    Participant = factor(Participant),
    Side = factor(Side),
    Condition = factor(Condition),
    Period = factor(Period)
  )

# Left
Aim2_PF_Impulse %>% 
  ggplot( aes(x = Period, y = PF_Impulse, color = factor(Participant), group = Participant)) +
  geom_point(size = 3) +
  geom_line() +
  facet_grid(cols=vars(Condition)) +
  labs(x = "Period", y = "Left PF Impulse (N.m.s/BW)", title = "Aim 2: Left PF Impulse by Period and Condition", color = "Participant") +
  theme_minimal() +
  theme(legend.position = "bottom")


# Right
PF_impulse_by_condition_participant %>% 
  filter(Aim==2) %>% 
  filter(Side=="right") %>%  
  ggplot( aes(x = Period, y = PF_Impulse, color = factor(Participant), group = Participant)) +
  geom_point(size = 3) +
  geom_line() +
  facet_grid(cols=vars(Condition)) +
  labs(x = "Period", y = "Right PF Impulse (N.m.s/BW)", title = "Aim 2: Right PF Impulse by Period and Condition", color = "Participant") +
  theme_minimal() +
  theme(legend.position = "bottom")


```

### Repeated Measures ANOVA
```{r}

print(Aim2_PF_Impulse)

# Perform Repeated Measures ANOVA
anova_result <- ezANOVA(
  data = Aim2_PF_Impulse,
  dv = PF_Impulse,
  wid = Participant,
  within = c(Condition, Period),
  detailed = TRUE,
  type = 3
)

# Print the ANOVA results
anova_result

# Conduct planned comparisons (pre to post within each condition)
planned_comparisons <- Aim2_PF_Impulse %>%
  group_by(Condition) %>%
  summarise(
    t_stat = t.test(PF_Impulse[Period == "Baseline"], 
                    PF_Impulse[Period == "PostAdapt"], 
                    paired = TRUE)$statistic,
    p_value = t.test(PF_Impulse[Period == "Baseline"], 
                     PF_Impulse[Period == "PostAdapt"], 
                     paired = TRUE)$p.value
  )


# Adjust p-values using multiple methods
planned_comparisons <- planned_comparisons %>%
  mutate(
    p_bonferroni = p.adjust(p_value, method = "bonferroni"),
    p_holm = p.adjust(p_value, method = "holm"),
    p_hochberg = p.adjust(p_value, method = "hochberg"),
    p_fdr = p.adjust(p_value, method = "fdr")
  )

# Print planned comparisons results with adjusted p-values
print(planned_comparisons)

```

#### Assumption Check

```{r}

Aim2_PF_Impulse %>% 
  group_by(Condition, Period) %>% 
  summarize(
    shapiro_statistic = shapiro.test(PF_Impulse)$statistic,
    shapiro_p_value = shapiro.test(PF_Impulse)$p.value,
    .groups = "drop"
  )

# Create Q-Q plot for all data
qq_plot <- ggplot(Aim2_PF_Impulse, aes(sample = PF_Impulse)) +
  stat_qq() +
  stat_qq_line() +
  labs(title = "Q-Q Plot of PF_Impulse Across All Conditions and Periods",
       x = "Theoretical Quantiles",
       y = "Sample Quantiles") +
  theme_minimal()

# Display the plot
print(qq_plot)

# Optional: Shapiro-Wilk test on all data
overall_shapiro_test <- shapiro.test(Aim2_PF_Impulse$PF_Impulse)
print(overall_shapiro_test)
```

# Aim 3: Bilateral PDSV

## Ankle Torque
### Sample Participant 

```{r}
figure_participant <-2

all_normalized_stance_data %>% 
  filter(Participant == figure_participant) %>%  
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  filter(Aim==3) %>% 
  filter(Axis %in% c("X")) %>% 
  filter(NewVariable == "IPSI_ANKLE_MOMENT") %>% 
  ggplot(aes(x=NormalizedTimeStep, y = AverageValue, color=Period))+
  geom_line()+
  facet_grid(cols = vars(Side), rows = vars(Condition), scales = "free_y")+
  theme_minimal()+
  theme(legend.position = "bottom")+
  labs(x="% Stance",
       y = "Torque (N.m/BW)") +
  labs(title = paste0("Subject ", figure_participant, ": Ankle Torque Profile Before and After 6 Minutes of Adaptation") ,
       subtitle = "Tested Conditions: B. FastBrake, B. FastProp",
       caption = str_wrap("Ankle torque on the left (altered) side is decreased following cSBT and FastBrake, but increases following adaptation to FastProp", width = 80),
       x = "% stance",
       y = "Torque (N.m/BW)")
```               



### All participants
```{r}

all_normalized_stance_data %>% 
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  filter(Aim==3) %>% 
  filter(Axis %in% c("X")) %>% 
  filter(NewVariable == "IPSI_ANKLE_MOMENT") %>% 
  group_by(Condition, Side, StartStop, Period, Variable, Axis, NormalizedTimeStep) %>% 
    summarize(AverageValue = mean(AverageValue)) %>% 

  ggplot(aes(x=NormalizedTimeStep, y = AverageValue, color=Period))+
  geom_line()+
  facet_grid(cols = vars(Side), rows = vars(Condition), scales = "free_y")+
  theme_minimal()+
  theme(legend.position = "bottom")+
  labs(x="% Stance",
       y = "Torque (N.m/BW)") +
  labs(title = "All Subjects: Ankle Torque Profile Before and After 6 Minutes of Adaptation" ,
       subtitle = "Tested Conditions: B. FastBrake, B. FastProp",
       x = "% stance",
       y = "Torque (N.m/BW)")

```


# Plot PF Impulse

```{r}

bilateral_PF_impulse_plot_data <- PF_impulse_by_condition_participant%>%
  ungroup() %>% 
  filter(Aim==3) %>% 
  group_by(Participant, Condition, Period) %>% 
  summarize(PF_Impulse = mean(PF_Impulse))
  
bilateral_PF_impulse_plot_data %>% 
ggplot(aes(x = Period, y = PF_Impulse, color = factor(Participant), group = Participant)) +
  geom_point(size = 3) +
  geom_line() +
  facet_grid(cols=vars(Condition)) +
  labs(x = "Period", y = "Average PF Impulse (N.m.s/BW)", title = "Aim 3: Mean PF Impulse by Period and Condition", color = "Participant") +
  theme_minimal() +
  theme(legend.position = "bottom")


```
## Assumptions for Power Analysis

```{r}
bilateral_PF_impulse_plot_data %>% 
  ungroup() %>% 
  group_by(Condition, Period) %>% 
  summarize(std_dev = sd(PF_Impulse),
            mean_PF_Impulse = mean(PF_Impulse))

bilateral_PF_impulse_plot_data %>% 
  group_by(Condition, Period) %>% 
  summarize(mean_PF_Impulse= mean(PF_Impulse))

  
  
# Assuming your dataframe is called 'df'
bilateral_PF_impulse_plot_data %>% 
  # Reshape the data to wide format
  pivot_wider(
    id_cols = c(Participant, Condition),
    names_from = Period,
    values_from = PF_Impulse
  ) %>% 
  # Group by Condition
  group_by(Condition) %>%
  # Calculate correlation for each Condition
  summarise(
    correlation = cor(Baseline, PostAdapt, use = "pairwise.complete.obs"),
    p_value = cor.test(Baseline, PostAdapt)$p.value
  ) %>%
  # Ungroup to remove grouping structure
  ungroup()


```

# step Length in a body frame of reference

Reviewing this calculations I think there are some problems with the way I went about it. Definitely want to go over these calcs with a fine-toothed comb.


```{r}
StepLength_BodyFrameOfReference <- all_normalized_stance_data %>% 
  ungroup() %>% 
  filter(NormalizedTimeStep==1) %>% 
  filter(Aim == 3) %>% 
  filter(Period %in% c("Baseline", "PostAdapt")) %>% 
  # separate(VariableAxis, into = c("Variable", "Axis"), sep = "_(?=[^_]+$)", extra = "merge") %>% 
  filter(Axis == "Y") %>% 
  filter(NewVariable %in% c("IPSI_HEEL", "CONTRA_HEEL", "PELVIS_COM")) %>% 
  select(-c(Axis, NormalizedTimeStep,StartStop, Variable, ConditionOrder)) %>% 
  pivot_wider(names_from = NewVariable, values_from = AverageValue) %>% 
  mutate(AnteriorStep = -(IPSI_HEEL-PELVIS_COM),
         PosteriorStep = CONTRA_HEEL-PELVIS_COM,
         Step = -(IPSI_HEEL - CONTRA_HEEL)) %>% 
  select(-c(PELVIS_COM, CONTRA_HEEL, IPSI_HEEL)) %>% 
  group_by(Condition, Participant,Period) %>% 
  summarise(AnteriorStep = mean(AnteriorStep),
            PosteriorStep = mean(PosteriorStep),
            Step = mean(Step)) %>% 
  pivot_longer(cols = c(AnteriorStep, PosteriorStep, Step)) %>% 
  ungroup() 
  
StepLength_BodyFrameOfReference %>% 
  ggplot(aes(x=Period, y = value, color = factor(Participant), group = Participant))+
  geom_point()+
  geom_line()+
  theme_minimal()+
  theme(legend.position = "bottom")+
  labs(y = "Length (m)")+
  facet_grid(rows=vars(Condition), cols = vars(name))

```

```{r}
all_normalized_stance_data %>% 
  filter(Aim==3) %>% 
  filter(Participant==3) %>% 
  filter(Period %in% c("Late Adapt")) %>%
  filter(NewVariable == "IPSI_BeltSpeed") %>% 
  mutate(Condition = factor(Condition, levels = c("cSBT", "U. FastBrake", "U. FastProp", "B. FastBrake", "B. FastProp"))) %>% 
  ggplot(aes(x=NormalizedTimeStep, y = AverageValue, color=Side))+
  geom_line()+
  facet_grid(cols = vars(Participant, Side), rows = vars(Condition))+
  theme_minimal()+
  theme( legend.position = "none",
        strip.text.y = element_text( angle=0))+
  labs(title = "Belt Speed Across Stance Phase By Condition",
       # subtitle = "Adaptation Belt Speeds for Aims 1 and 2",
       x = "% Stance",
       y = "Belt Speed (m/s)",
  ) +
  scale_color_manual(values=c("left"="blue", "right"="red"))

```

